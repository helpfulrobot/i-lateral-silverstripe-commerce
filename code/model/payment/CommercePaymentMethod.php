<?php

/**
 * 'Abstract' class that you will extend to add payment providers
 * These will automatically be added under the "Payments" tab in
 * Settings, inside the CMS
 *
 *
 */

class CommercePaymentMethod extends DataObject {

    /**
     * Title of this payment method (eg: PayPal, WorldPay, etc)
     *
     */
    public $Title;

    /**
     * Route to icon that is associated with this provider
     *
     */
    public $Icon;

    public static $db = array(
        // Payment Gateway config
        'Summary'           => 'Text',
        'URL'               => 'Varchar(200)',
        'GatewayMessage'    => 'Text',
        'Default'           => 'Boolean',
        'CallBackSlug'      => 'Varchar'
    );

    public static $has_one = array(
        'ParentConfig'  => 'SiteConfig'
    );

    public static $casting = array(
        'Label' => 'Text'
    );

    public static $summary_fields = array(
        'Title',
        'Summary',
        'Default'
    );

    /*
     * Combine this objects summary and it's icon, if it has one.
     *
     * @return String
     */
    public function getLabel() {
        return ($this->Icon) ? '<img class="payment-icon" src="'. $this->Icon .'" /> <span>' . $this->Summary . '</span>' : "<span>{$this->Summary}</span>";
    }

    public function getCMSFields() {
        $fields = parent::getCMSFields();

        $fields->removeByName('ParentConfigID');

        // Setup Payment Gateway type
        $payments = ClassInfo::subclassesFor('CommercePaymentMethod');
        // Remove parent class from list
        unset($payments['CommercePaymentMethod']);

        $classname_field = DropdownField::create('ClassName','Type of Payment',$payments)
            ->setHasEmptyDefault(true)
            ->setEmptyString('Select Gateway');

        $fields->addFieldToTab('Root.Main', $classname_field);

        if($this->ID) {
            $fields->addFieldToTab('Root.Main', TextField::create('Summary', 'Summary message to appear on website'));
            $fields->addFieldToTab('Root.Main', TextField::create('URL', 'Payment gateway URL'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Default', 'Default payment method?'));
            $fields->addFieldToTab('Root.Main', TextareaField::create('GatewayMessage','Message to appear when user user is directed to payment provider'));

            // Use to display autogenerated URL
            $slug_field = TextField::create('CallBackSlug', 'Slug used in payment provider callbacks');

            // Allow admin to edit payment url slugs
            if(!Permission::check('ADMIN')) {
                $slug_field
                    ->setReadonly(true)
                    ->performReadonlyTransformation();
            }

            $fields->addFieldToTab('Root.Main', $slug_field);
        } else {
            $fields->removeByName('URL');
            $fields->removeByName('Summary');
            $fields->removeByName('Default');
            $fields->removeByName('GatewayMessage');
            $fields->removeByName('CallBackSlug');
        }

        return $fields;
    }

    // Get relevent payment gateway URL to use in HTML form
    public function GatewayURL() {
            return $this->URL;
    }

    /**
     * Return a form that will be loaded into the Payment template and will post
     * to the payment gateway provider.
     *
     * @return Form
     */
    public function getGatewayFields() {
        user_error('You have not added a GatewayFields() method on your PaymentMethod Class');
    }

    /**
     * Return a form that will be loaded into the Payment template and will post
     * to the payment gateway provider.
     *
     * @return Form
     */
    public function getGatewayActions() {
        $actions = new FieldList(
            LiteralField::create('BackButton','<a href="' . BASE_URL . '/' . Checkout_Controller::$url_segment . '" class="btn commerce-action-back">' . _t('Commerce.BACK','Back') . '</a>'),
            FormAction::create('Submit', _t('Commerce.CONFIRMPAY','Confirm and Pay'))->addExtraClass('btn')->addExtraClass('highlight')->addExtraClass('commerce-action-next')
        );

        return $actions;
    }

    /**
     * Return a string that will be loaded into the summary form
     *
     * @return String
     */
    public function GatewayData() {
        user_error('You have not added a GatewayData() method on your PaymentMethod Class');
    }

    /**
     * Process the call back from the payment provider
     *
     * @param order the order stored in the session
     * @param data post data from the form
     */
    public function ProcessCallback($data = null) {
        user_error('You have not added a ProcessCallback() method on your PaymentMethod Class');
    }
}
